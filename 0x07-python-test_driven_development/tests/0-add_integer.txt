# 0-add_integer.txt

===========================
How to use 0-add_integer.py
===========================

This file contains only one function called
"add_integer(...)".

Numbers
=======

"add_integer(...)" returns the addition of its arguments. For Numbers,
that value is equivalent to using "+" operator.


::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

Checking for module docstring:
	 >>> length = __import__("0-add_integer").__doc__
	 >>> len(length) > 1
	 True

Checking for function docstring:
	 >>> length2 = __import__("0-add_integer").add_integer.__doc__
         >>> len(length2) > 1
         True

For floating-point they must be casted to int before addition is perfomed.

::

    >>> add_integer(2.0, 6.0)
    8

Notice that the second argument is optional - it is 98 by default as seen in the
main python file.

::

    >>> add_integer(2)
    100

It also works for addition of floatin-point numbers and int numbers.

::

    >>> add_integer(2.0, 3)
    5

Non-numbers
===========
our function "add_integer()" only works for numbers(int or float).
so, if either of the arguments is not a number it raises a TypeError.


Checking number with non-number:
	 >>> add_integer("a", 3)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

Checking number with non-number:
	 >>> add_integer(3, "2")
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

Checking with None:
	 >>> add_integer(None)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer


Checking with None:
	 >>> add_integer(3, None)
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

If the passed arguments are both not numbers, the TypeError message
will be printed only for the first argument.

Checking:
	 >>> add_integer("a", "b")
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

If passed for NaN

Checking for passed NaN:
	 >>> add_integer(1, float('nan'))
	 Traceback (most recent call last):
	 ...
	 ValueError: cannot convert float NaN to integer

If passed an infinity

Checking for passed inf:
	 >>> add_integer(1, float('inf'))
	 Traceback (most recent call last):
	 ...
	 OverflowError: cannot convert float infinity to integer
