#2-matrix_divided.txt

==============================
How to use 2-matrix_divided.py
==============================

This module provides the function matrix_divided(matrix, div).

Numbers
=======

``matrix_divided(...)`` returns a new list.  For numbers,
that value is equivalent to using the ``/`` operator.

::

    >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Checking for module docstring:
	 >>> length = __import__("2-matrix_divided").__doc__
	 >>> len(length) > 1
	 True

Checking for function docstring:
	 >>> length2 = __import__("2-matrix_divided").matrix_divided.__doc__
         >>> len(length2) > 1
         True

Checking for passing None as matrix:
	 >>> matrix_divided(None, 1)
	 Traceback (most recent call last):
         ...
         TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for matrix as non-list:
	 >>> matrix = "a"
	 >>> matrix_divided(matrix, 1)
	 Traceback (most recent call last):
         ...
         TypeError: matrix must be a matrix (list of lists) of integers/floats

::
      >>> matrix_divided([[1, 2, 3], [4, 5, 6, 7, 8]], 3)
      Traceback (most recent call last):
      TypeError: Each row of the matrix must have the same size

Checking for mix of ints, floats, and tuple:
         >>> matrix = [[1, (1,), 3], [4, 5, 6.8]]
         >>> matrix_divided(matrix, 5)
         Traceback (most recent call last):
         ...
         TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for passing None as div:
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
	 >>> matrix_divided(matrix, None)
	 Traceback (most recent call last):
         ...
	 TypeError: div must be a number

Checking for div as non-number:
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
	 >>> matrix_divided(matrix, "A")
	 Traceback (most recent call last):
         ...
         TypeError: div must be a number

Checking for division by zero:
	 >>> matrix_divided(matrix, 0)
	 Traceback (most recent call last):
	 ...
	 ZeroDivisionError: division by zero

Checking for regular division:
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
	 >>> matrix_divided(matrix, 3)
	 [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	 >>> matrix
	 [[1, 2, 3], [4, 5, 6]]

Checking for mix of ints and floats:
	 >>> matrix = [[1, 2.4, 3], [4.1, 5, 6.8]]
	 >>> matrix_divided(matrix, 11)
	 [[0.09, 0.22, 0.27], [0.37, 0.45, 0.62]]
	 >>> matrix
	 [[1, 2.4, 3], [4.1, 5, 6.8]]

Checking for div as float:
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
	 >>> matrix_divided(matrix, 4.5)
	 [[0.22, 0.44, 0.67], [0.89, 1.11, 1.33]]
	 >>> matrix
	 [[1, 2, 3], [4, 5, 6]]

If matrix is empty:
         >>> matrix = []
         >>> matrix_divided(matrix, 2)
         Traceback (most recent call last):
         ...
         TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[4, 5], [6, 8]], float('inf'))
[[0.0, 0.0], [0.0, 0.0]]

>>> try:
...     matrix_divided([[4, 7]])
... except Exception as ex:
...     print(ex.args[0])
matrix_divided() missing 1 required positional argument: 'div'

>>> try:
...     matrix_divided()
... except Exception as ex:
...     print(ex.args[0])
matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
